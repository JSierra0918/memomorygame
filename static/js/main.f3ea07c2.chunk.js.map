{"version":3,"sources":["logo.svg","components/Header.js","components/Main.js","components/Grid.js","components/LeftSide.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","score","topScore","Main","children","Grid","src","image","alt","onClick","dataId","data-id","data-click","dataClick","LeftSide","newImageArray","Object","toConsumableArray","ImageArray","GameContainer","state","clicked","addScore","imgID","currentTopScore","_this","newScore","clickedImage","includes","alert","reset","push","setState","shuffle","array","counter","length","index","Math","floor","random","temp","map","item","url","process","components_Grid","key","id","console","log","components_Header","this","components_Main","components_LeftSide","React","Component","App","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sqBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kNCezBC,MAbf,SAAgBC,GAEZ,OACAC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,yBAEAF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMK,MAAlB,iBAAuCL,EAAMM,SAA7C,QCEGC,MATf,SAAgBP,GAEZ,OACIC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACdJ,EAAMQ,WCKDC,MATf,SAAgBT,GAIZ,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeH,EAAAC,EAAAC,cAAA,OAAKO,IAAKV,EAAMW,MAAOC,IAAI,GAAGR,UAAU,aAAaS,QAAS,kBAAKb,EAAMa,QAAQb,EAAMc,SAASC,UAASf,EAAMc,OAAQE,aAAYhB,EAAMiB,YAAvK,MCGQC,MARf,WACI,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACPH,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,mFCGVgB,EAAaC,OAAAC,EAAA,EAAAD,CAAOE,GAsFXC,6MAnFXC,MAAQ,CACJnB,MAAO,EACPC,SAAU,EACVmB,QAAS,MAIZC,SAAW,SAACC,GACT,IAAIC,EAAkBC,EAAKL,MAAMlB,SAC7BwB,EAAWD,EAAKL,MAAMnB,MACtB0B,EAAeF,EAAKL,MAAMC,UAE9BK,GAEgBF,IACZA,EAAkBE,GAGlBC,EAAaC,SAASL,IACtBM,MAAM,6BAA+BN,GACrCE,EAAKK,MAAMJ,KAEXC,EAAaI,KAAKR,GAElBE,EAAKO,SAAS,CACV/B,MAAQyB,EACRxB,SAAUsB,QAKrBS,QAAU,SAACC,GAIR,IAHA,IAAIC,EAAUD,EAAME,OAGbD,EAAU,GAAG,CAEhB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAMnCM,EAAOP,IAHXC,GAIAD,EAAMC,GAAWD,EAAMG,GACvBH,EAAMG,GAASI,EAQnB,OALiBP,EAAMQ,IAAI,SAACC,GACxB,IAAIC,EAAKC,cAAyBF,EAAKpC,MAEvC,OAAQV,EAAAC,EAAAC,cAAC+C,EAAD,CAAMvC,MAAOqC,EAAKnC,QAASgB,EAAKH,SAAUyB,IAAKJ,EAAKK,GAAInC,UAAWY,EAAKL,MAAMC,QAASX,OAAQiC,EAAKK,UAKpHlB,MAAQ,SAACJ,GAELuB,QAAQC,IAAI,UACZnC,EAAaC,OAAAC,EAAA,EAAAD,CAAQE,GAErBO,EAAKO,SAAS,CACV/B,MAAO,EACPoB,QAAS,8EAKb,OACIxB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACoD,EAAD,CAAQlD,MAAOmD,KAAKhC,MAAMnB,MAAOC,SAAUkD,KAAKhC,MAAMlB,WACtDL,EAAAC,EAAAC,cAACsD,EAAD,KACIxD,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAEZoD,KAAKnB,QAAQlB,aA5EVwC,IAAMC,WCGnBC,MARf,WACE,OACE5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2D,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f3ea07c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nfunction Header(props){\r\n    \r\n    return (\r\n    <div>\r\n        <header className=\"header\"> \r\n            <h1>Future Logo</h1>\r\n            {/* <h1>Welcome to the Memory Game!</h1> */}\r\n            <h1>Score: {props.score} | Top Score: {props.topScore} </h1>\r\n        </header>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction  Main (props){\r\n    \r\n    return (\r\n        <main className=\"main-area\">\r\n         {props.children}          \r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\n\r\nfunction  Grid (props) {\r\n    function turnClick() {\r\n       return props.dataId = true;\r\n    }\r\n    return (\r\n       <div className=\"img-wrapper\" ><img src={props.image} alt=\"\" className=\"grid-image\" onClick={()=> props.onClick(props.dataId)} data-id={props.dataId} data-click={props.dataClick} /> </div>\r\n    );\r\n}\r\n\r\nexport default Grid;\r\n","import React from 'react';\r\n\r\nfunction LeftSide () {\r\n    return (\r\n        <div className=\"left-side\">  \r\n                <h3 >Welcome to the Memory Game!</h3>\r\n                <p>Use your memory and try not to click on the same image twice!</p>\r\n        </div>\r\n    )\r\n}\r\nexport default LeftSide;","import React from 'react';\r\nimport Header from './Header';\r\nimport Main from './Main';\r\nimport Grid from './Grid';\r\nimport LeftSide from './LeftSide';\r\n\r\nimport ImageArray from '../Images.json';\r\n\r\n  //Global Variable\r\n  let newImageArray = [...ImageArray];\r\n\r\nclass GameContainer extends React.Component {\r\n    state = {\r\n        score: 0,\r\n        topScore: 0,\r\n        clicked: []\r\n    }\r\n  \r\n\r\n     addScore = (imgID) => {\r\n        let currentTopScore = this.state.topScore;\r\n        let newScore = this.state.score;\r\n        let clickedImage = this.state.clicked;\r\n        //increment score\r\n        newScore++;\r\n        //check if it's highest score\r\n        if (newScore >= currentTopScore) {\r\n            currentTopScore = newScore;\r\n        }\r\n        //check if you you've already clicked on it.\r\n        if (clickedImage.includes(imgID)) {\r\n            alert(\"You've already clicked on \" + imgID);\r\n            this.reset(newScore);\r\n        }else {\r\n            clickedImage.push(imgID);\r\n\r\n            this.setState({\r\n                score:  newScore,\r\n                topScore: currentTopScore\r\n            })\r\n        }\r\n    }\r\n\r\n     shuffle = (array) => {\r\n        let counter = array.length;\r\n    \r\n        // While there are elements in the array\r\n        while (counter > 0) {\r\n            // Pick a random index\r\n            let index = Math.floor(Math.random() * counter);\r\n    \r\n            // Decrease counter by 1\r\n            counter--;\r\n    \r\n            // And swap the last element with it\r\n            let temp = array[counter];\r\n            array[counter] = array[index];\r\n            array[index] = temp;\r\n        }\r\n\r\n        const domArray = array.map((item) => {\r\n            let url =process.env.PUBLIC_URL + item.image;\r\n        \r\n            return  <Grid image={url} onClick={this.addScore} key={item.id} dataClick={this.state.clicked} dataId={item.id}/>\r\n        });    \r\n        return domArray;\r\n    }\r\n\r\n    reset = (newScore) => {\r\n        // reset the array\r\n        console.log(\"reset!\")\r\n        newImageArray  = [...ImageArray];\r\n        \r\n        this.setState({\r\n            score: 0,\r\n            clicked: []\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Header score={this.state.score} topScore={this.state.topScore} />\r\n                <Main>\r\n                    <LeftSide/>\r\n                    <div className = \"grid-container\"> \r\n                        {/* <Grid image={process.env.PUBLIC_URL + \"/assets/ace.jpeg\"} wasClicked={this.addScore}/>  */}\r\n                        {this.shuffle(newImageArray)}\r\n                    </div>\r\n                </Main>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameContainer;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './Grid.css';\nimport GameContainer from './components/GameContainer'\n\nfunction App() {\n  return (\n    <div>\n      <GameContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}